// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:114

#ifndef _TAO_IDL_RETURNC_CKRMMO_H_
#define _TAO_IDL_RETURNC_CKRMMO_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:151
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:41

namespace AAAAAAAAA
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_type.cpp:250
  
  struct ESS;
  
  typedef
    ::TAO_Var_Var_T<
        ESS
      >
    ESS_var;
  
  typedef
    ::TAO_Out_T<
        ESS
      >
    ESS_out;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47
  
  struct  ESS
  {
    typedef ESS_var _var_type;
    typedef ESS_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::TAO::String_Manager a;
  };
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_ESS;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

#if !defined (_AAAAAAAAA_EEESEQ_CH_)
#define _AAAAAAAAA_EEESEQ_CH_
  
  class EEESeq;
  
  typedef
    ::TAO_VarSeq_Var_T<
        EEESeq
      >
    EEESeq_var;
  
  typedef
    ::TAO_Seq_Out_T<
        EEESeq
      >
    EEESeq_out;
  
  class  EEESeq
    : public
        ::TAO::unbounded_value_sequence<
            ESS
          >
  {
  public:
    EEESeq (void);
    EEESeq ( ::CORBA::ULong max);
    EEESeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ESS* buffer, 
      ::CORBA::Boolean release = false);
    EEESeq (const EEESeq &);
    virtual ~EEESeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef EEESeq_var _var_type;
    typedef EEESeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_EEESeq;
  
  // TAO_IDL - Generated from 
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:61
  
  typedef ::CORBA::Long aaaaa[100];
  typedef ::CORBA::Long aaaaa_slice;
  struct aaaaa_tag {};
  
  
  typedef
    TAO_FixedArray_Var_T<
        aaaaa,
        aaaaa_slice,
        aaaaa_tag
      >
    aaaaa_var;
  
  typedef
    aaaaa
    aaaaa_out;
  
  typedef
    TAO_Array_Forany_T<
        aaaaa,
        aaaaa_slice,
        aaaaa_tag
      >
    aaaaa_forany;
  
  TAO_NAMESPACE_STORAGE_CLASS aaaaa_slice *
  aaaaa_alloc (void);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  aaaaa_free (
      aaaaa_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS aaaaa_slice *
  aaaaa_dup (
      const aaaaa_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  aaaaa_copy (
      aaaaa_slice *_tao_to,
      const aaaaa_slice *_tao_from);
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_aaaaa;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_interface.cpp:784

#if !defined (_AAAAAAAAA_IIIIIIIIII__VAR_OUT_CH_)
#define _AAAAAAAAA_IIIIIIIIII__VAR_OUT_CH_
  
  class IIIIIIIIII;
  typedef IIIIIIIIII *IIIIIIIIII_ptr;
  
  typedef
    TAO_Objref_Var_T<
        IIIIIIIIII
      >
    IIIIIIIIII_var;
  
  typedef
    TAO_Objref_Out_T<
        IIIIIIIIII
      >
    IIIIIIIIII_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:45
  
  class  IIIIIIIIII
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<IIIIIIIIII>;
    typedef IIIIIIIIII_ptr _ptr_type;
    typedef IIIIIIIIII_var _var_type;
    typedef IIIIIIIIII_out _out_type;
    
    // The static operations.
    static IIIIIIIIII_ptr _duplicate (IIIIIIIIII_ptr obj);
    
    static void _tao_release (IIIIIIIIII_ptr obj);
    
    static IIIIIIIIII_ptr _narrow (::CORBA::Object_ptr obj);
    static IIIIIIIIII_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static IIIIIIIIII_ptr _nil (void)
    {
      return static_cast<IIIIIIIIII_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:36
    
    virtual ::AAAAAAAAA::EEESeq *
    op1 (void);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:36
    
    virtual ::AAAAAAAAA::ESS *
    op2 (void);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:204
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_IIIIIIIIII_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    IIIIIIIIII (void);
    
    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void AAAAAAAAA_IIIIIIIIII_setup_collocation (void);
    
    // Concrete non-local interface only.
    IIIIIIIIII (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    IIIIIIIIII (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~IIIIIIIIII (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    IIIIIIIIII (const IIIIIIIIII &);
    
    void operator= (const IIIIIIIIII &);
  };
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:40
  
  extern  ::CORBA::TypeCode_ptr const _tc_IIIIIIIIII;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:70

} // module AAAAAAAAA

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:193

extern 
TAO::Collocation_Proxy_Broker *
(*AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      AAAAAAAAA::aaaaa_forany
    >
  {
    static void free (
        AAAAAAAAA::aaaaa_slice * _tao_slice);
    static AAAAAAAAA::aaaaa_slice * dup (
        const AAAAAAAAA::aaaaa_slice * _tao_slice);
    static void copy (
        AAAAAAAAA::aaaaa_slice * _tao_to,
        const AAAAAAAAA::aaaaa_slice * _tao_from);
    static AAAAAAAAA::aaaaa_slice * alloc (void);
    static void zero (
        AAAAAAAAA::aaaaa_slice * _tao_slice);
  };

#if !defined (_AAAAAAAAA_IIIIIIIIII__TRAITS_)
#define _AAAAAAAAA_IIIIIIIIII__TRAITS_
  
  template<>
  struct  Objref_Traits< ::AAAAAAAAA::IIIIIIIIII>
  {
    static ::AAAAAAAAA::IIIIIIIIII_ptr duplicate (
        ::AAAAAAAAA::IIIIIIIIII_ptr p);
    static void release (
        ::AAAAAAAAA::IIIIIIIIII_ptr p);
    static ::AAAAAAAAA::IIIIIIIIII_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::AAAAAAAAA::IIIIIIIIII_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const AAAAAAAAA::ESS &); // copying version
 void operator<<= (::CORBA::Any &, AAAAAAAAA::ESS*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AAAAAAAAA::ESS *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const AAAAAAAAA::ESS *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const AAAAAAAAA::EEESeq &); // copying version
 void operator<<= ( ::CORBA::Any &, AAAAAAAAA::EEESeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AAAAAAAAA::EEESeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const AAAAAAAAA::EEESeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const AAAAAAAAA::aaaaa_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AAAAAAAAA::aaaaa_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace AAAAAAAAA
{
   void operator<<= ( ::CORBA::Any &, IIIIIIIIII_ptr); // copying
   void operator<<= ( ::CORBA::Any &, IIIIIIIIII_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, IIIIIIIIII_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, AAAAAAAAA::IIIIIIIIII_ptr); // copying
 void operator<<= (::CORBA::Any &, AAAAAAAAA::IIIIIIIIII_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AAAAAAAAA::IIIIIIIIII_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AAAAAAAAA::ESS &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, AAAAAAAAA::ESS &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_AAAAAAAAA_EEESeq_H_
#define _TAO_CDR_OP_AAAAAAAAA_EEESeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (
  TAO_OutputCDR &strm,
  const AAAAAAAAA::EEESeq &_tao_sequence);

 ::CORBA::Boolean operator>> (
  TAO_InputCDR &strm,
  AAAAAAAAA::EEESeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_AAAAAAAAA_EEESeq_H_ */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:107


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const AAAAAAAAA::aaaaa_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, AAAAAAAAA::aaaaa_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:46

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AAAAAAAAA::IIIIIIIIII_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, AAAAAAAAA::IIIIIIIIII_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:1591
#if defined (__ACE_INLINE__)
#include "returnC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

