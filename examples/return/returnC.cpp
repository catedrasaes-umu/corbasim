// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:355


#include "returnC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "returnC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:855

#if !defined (_AAAAAAAAA_ESS__ARG_TRAITS_)
#define _AAAAAAAAA_ESS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<AAAAAAAAA::ESS>
    : public
        Var_Size_Arg_Traits_T<
            AAAAAAAAA::ESS,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:607

#if !defined (_AAAAAAAAA_EEESEQ__ARG_TRAITS_)
#define _AAAAAAAAA_EEESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<AAAAAAAAA::EEESeq>
    : public
        Var_Size_Arg_Traits_T<
            AAAAAAAAA::EEESeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_AAAAAAAAA_ESS[] =
      {
        { "a", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_AAAAAAAAA_ESS (
  ::CORBA::tk_struct,
  "IDL:AAAAAAAAA/ESS:1.0",
  "ESS",
  _tao_fields_AAAAAAAAA_ESS,
  1);

namespace AAAAAAAAA
{
  ::CORBA::TypeCode_ptr const _tc_ESS =
    &_tao_tc_AAAAAAAAA_ESS;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:56

void 
AAAAAAAAA::ESS::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ESS *_tao_tmp_pointer =
    static_cast<ESS *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:56

#if !defined (_AAAAAAAAA_EEESEQ_CS_)
#define _AAAAAAAAA_EEESEQ_CS_

AAAAAAAAA::EEESeq::EEESeq (void)
{}

AAAAAAAAA::EEESeq::EEESeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ESS
      >
    (max)
{}

AAAAAAAAA::EEESeq::EEESeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    AAAAAAAAA::ESS * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence<
        ESS
      >
    (max, length, buffer, release)
{}

AAAAAAAAA::EEESeq::EEESeq (
    const EEESeq &seq)
  : ::TAO::unbounded_value_sequence<
        ESS
      >
    (seq)
{}

AAAAAAAAA::EEESeq::~EEESeq (void)
{}

void AAAAAAAAA::EEESeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  EEESeq * _tao_tmp_pointer =
    static_cast<EEESeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:510


#ifndef _TAO_TYPECODE_AAAAAAAAA_EEESeq_GUARD
#define _TAO_TYPECODE_AAAAAAAAA_EEESeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        AAAAAAAAA_EEESeq_0 (
          ::CORBA::tk_sequence,
          &AAAAAAAAA::_tc_ESS,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_AAAAAAAAA_EEESeq_0 =
        &AAAAAAAAA_EEESeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_AAAAAAAAA_EEESeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AAAAAAAAA_EEESeq (
    ::CORBA::tk_alias,
    "IDL:AAAAAAAAA/EEESeq:1.0",
    "EEESeq",
    &TAO::TypeCode::tc_AAAAAAAAA_EEESeq_0);
  
namespace AAAAAAAAA
{
  ::CORBA::TypeCode_ptr const _tc_EEESeq =
    &_tao_tc_AAAAAAAAA_EEESeq;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:100

AAAAAAAAA::aaaaa_slice *
AAAAAAAAA::aaaaa_dup (const AAAAAAAAA::aaaaa_slice *_tao_src_array)
{
  AAAAAAAAA::aaaaa_slice *_tao_dup_array =
    AAAAAAAAA::aaaaa_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <AAAAAAAAA::aaaaa_slice *> (0);
    }
  
  AAAAAAAAA::aaaaa_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

AAAAAAAAA::aaaaa_slice *
AAAAAAAAA::aaaaa_alloc (void)
{
  AAAAAAAAA::aaaaa_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[100], 0);
  return retval;
}

void
AAAAAAAAA::aaaaa_free (
    AAAAAAAAA::aaaaa_slice *_tao_slice
  )
{
  delete [] _tao_slice;
}

void 
AAAAAAAAA::aaaaa_copy (
    AAAAAAAAA::aaaaa_slice * _tao_to,
    const AAAAAAAAA::aaaaa_slice *_tao_from
  )
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 100; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:347


#ifndef _TAO_TYPECODE_AAAAAAAAA_aaaaa_GUARD
#define _TAO_TYPECODE_AAAAAAAAA_aaaaa_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        AAAAAAAAA_aaaaa_100 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          100U);
        
      ::CORBA::TypeCode_ptr const tc_AAAAAAAAA_aaaaa =
        &AAAAAAAAA_aaaaa_100;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_AAAAAAAAA_aaaaa_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AAAAAAAAA_aaaaa (
    ::CORBA::tk_alias,
    "IDL:AAAAAAAAA/aaaaa:1.0",
    "aaaaa",
    &TAO::TypeCode::tc_AAAAAAAAA_aaaaa);
  
namespace AAAAAAAAA
{
  ::CORBA::TypeCode_ptr const _tc_aaaaa =
    &_tao_tc_AAAAAAAAA_aaaaa;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for AAAAAAAAA::IIIIIIIIII.

AAAAAAAAA::IIIIIIIIII_ptr
TAO::Objref_Traits<AAAAAAAAA::IIIIIIIIII>::duplicate (
    AAAAAAAAA::IIIIIIIIII_ptr p)
{
  return AAAAAAAAA::IIIIIIIIII::_duplicate (p);
}

void
TAO::Objref_Traits<AAAAAAAAA::IIIIIIIIII>::release (
    AAAAAAAAA::IIIIIIIIII_ptr p)
{
  ::CORBA::release (p);
}

AAAAAAAAA::IIIIIIIIII_ptr
TAO::Objref_Traits<AAAAAAAAA::IIIIIIIIII>::nil (void)
{
  return AAAAAAAAA::IIIIIIIIII::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AAAAAAAAA::IIIIIIIIII>::marshal (
    const AAAAAAAAA::IIIIIIIIII_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:68

::AAAAAAAAA::EEESeq *
AAAAAAAAA::IIIIIIIIII::op1 (void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IIIIIIIIII_Proxy_Broker_ == 0)
    {
      AAAAAAAAA_IIIIIIIIII_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::AAAAAAAAA::EEESeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "op1",
      3,
      this->the_TAO_IIIIIIIIII_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:68

::AAAAAAAAA::ESS *
AAAAAAAAA::IIIIIIIIII::op2 (void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IIIIIIIIII_Proxy_Broker_ == 0)
    {
      AAAAAAAAA_IIIIIIIIII_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::AAAAAAAAA::ESS>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "op2",
      3,
      this->the_TAO_IIIIIIIIII_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

AAAAAAAAA::IIIIIIIIII::IIIIIIIIII (void)
 : the_TAO_IIIIIIIIII_Proxy_Broker_ (0)
{
  this->AAAAAAAAA_IIIIIIIIII_setup_collocation ();
}

void
AAAAAAAAA::IIIIIIIIII::AAAAAAAAA_IIIIIIIIII_setup_collocation ()
{
  if (::AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IIIIIIIIII_Proxy_Broker_ =
        ::AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer (this);
    }
}

AAAAAAAAA::IIIIIIIIII::~IIIIIIIIII (void)
{}

void 
AAAAAAAAA::IIIIIIIIII::_tao_any_destructor (void *_tao_void_pointer)
{
  IIIIIIIIII *_tao_tmp_pointer =
    static_cast<IIIIIIIIII *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AAAAAAAAA::IIIIIIIIII_ptr
AAAAAAAAA::IIIIIIIIII::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IIIIIIIIII>::narrow (
        _tao_objref,
        "IDL:AAAAAAAAA/IIIIIIIIII:1.0",
        AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer
      );
}

AAAAAAAAA::IIIIIIIIII_ptr
AAAAAAAAA::IIIIIIIIII::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IIIIIIIIII>::unchecked_narrow (
        _tao_objref,
        "IDL:AAAAAAAAA/IIIIIIIIII:1.0",
        AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer
      );
}

AAAAAAAAA::IIIIIIIIII_ptr
AAAAAAAAA::IIIIIIIIII::_duplicate (IIIIIIIIII_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
AAAAAAAAA::IIIIIIIIII::_tao_release (IIIIIIIIII_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AAAAAAAAA::IIIIIIIIII::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:AAAAAAAAA/IIIIIIIIII:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AAAAAAAAA::IIIIIIIIII::_interface_repository_id (void) const
{
  return "IDL:AAAAAAAAA/IIIIIIIIII:1.0";
}

::CORBA::Boolean
AAAAAAAAA::IIIIIIIIII::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AAAAAAAAA_IIIIIIIIII (
    ::CORBA::tk_objref,
    "IDL:AAAAAAAAA/IIIIIIIIII:1.0",
    "IIIIIIIIII");
  
namespace AAAAAAAAA
{
  ::CORBA::TypeCode_ptr const _tc_IIIIIIIIII =
    &_tao_tc_AAAAAAAAA_IIIIIIIIII;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const AAAAAAAAA::ESS &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<AAAAAAAAA::ESS *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<AAAAAAAAA::ESS>::insert_copy (
        _tao_any,
        AAAAAAAAA::ESS::_tao_any_destructor,
        AAAAAAAAA::_tc_ESS,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    AAAAAAAAA::ESS *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<AAAAAAAAA::ESS>::insert (
      _tao_any,
      AAAAAAAAA::ESS::_tao_any_destructor,
      AAAAAAAAA::_tc_ESS,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    AAAAAAAAA::ESS *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const AAAAAAAAA::ESS *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const AAAAAAAAA::ESS *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<AAAAAAAAA::ESS>::extract (
        _tao_any,
        AAAAAAAAA::ESS::_tao_any_destructor,
        AAAAAAAAA::_tc_ESS,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const AAAAAAAAA::EEESeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<AAAAAAAAA::EEESeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<AAAAAAAAA::EEESeq>::insert_copy (
        _tao_any,
        AAAAAAAAA::EEESeq::_tao_any_destructor,
        AAAAAAAAA::_tc_EEESeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    AAAAAAAAA::EEESeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<AAAAAAAAA::EEESeq>::insert (
      _tao_any,
      AAAAAAAAA::EEESeq::_tao_any_destructor,
      AAAAAAAAA::_tc_EEESeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    AAAAAAAAA::EEESeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const AAAAAAAAA::EEESeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const AAAAAAAAA::EEESeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<AAAAAAAAA::EEESeq>::extract (
        _tao_any,
        AAAAAAAAA::EEESeq::_tao_any_destructor,
        AAAAAAAAA::_tc_EEESeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const AAAAAAAAA::aaaaa_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      AAAAAAAAA::aaaaa_slice,
      AAAAAAAAA::aaaaa_forany
    >::insert (
        _tao_any,
        AAAAAAAAA::aaaaa_forany::_tao_any_destructor,
        AAAAAAAAA::_tc_aaaaa,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : AAAAAAAAA::aaaaa_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    AAAAAAAAA::aaaaa_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        AAAAAAAAA::aaaaa_slice,
        AAAAAAAAA::aaaaa_forany
      >::extract (
          _tao_any,
          AAAAAAAAA::aaaaa_forany::_tao_any_destructor,
          AAAAAAAAA::_tc_aaaaa,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AAAAAAAAA::IIIIIIIIII>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace AAAAAAAAA
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IIIIIIIIII_ptr _tao_elem)
  {
    IIIIIIIIII_ptr _tao_objptr =
      IIIIIIIIII::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IIIIIIIIII_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IIIIIIIIII>::insert (
        _tao_any,
        IIIIIIIIII::_tao_any_destructor,
        _tc_IIIIIIIIII,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IIIIIIIIII_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IIIIIIIIII>::extract (
          _tao_any,
          IIIIIIIIII::_tao_any_destructor,
          _tc_IIIIIIIIII,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    AAAAAAAAA::IIIIIIIIII_ptr _tao_elem)
{
  AAAAAAAAA::IIIIIIIIII_ptr _tao_objptr =
    AAAAAAAAA::IIIIIIIIII::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    AAAAAAAAA::IIIIIIIIII_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AAAAAAAAA::IIIIIIIIII>::insert (
      _tao_any,
      AAAAAAAAA::IIIIIIIIII::_tao_any_destructor,
      AAAAAAAAA::_tc_IIIIIIIIII,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AAAAAAAAA::IIIIIIIIII_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AAAAAAAAA::IIIIIIIIII>::extract (
        _tao_any,
        AAAAAAAAA::IIIIIIIIII::_tao_any_destructor,
        AAAAAAAAA::_tc_IIIIIIIIII,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:52


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AAAAAAAAA::ESS &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.a.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AAAAAAAAA::ESS &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.a.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:94
#if !defined _TAO_CDR_OP_AAAAAAAAA_EEESeq_CPP_
#define _TAO_CDR_OP_AAAAAAAAA_EEESeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AAAAAAAAA::EEESeq &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AAAAAAAAA::EEESeq &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_AAAAAAAAA_EEESeq_CPP_ */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:171


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AAAAAAAAA::aaaaa_forany &_tao_array
  )
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        100
      );
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AAAAAAAAA::aaaaa_forany &_tao_array
  )
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        100
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AAAAAAAAA::IIIIIIIIII_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AAAAAAAAA::IIIIIIIIII_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::AAAAAAAAA::IIIIIIIIII RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        AAAAAAAAA__TAO_IIIIIIIIII_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



