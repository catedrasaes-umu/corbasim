import org::csu::idl::idlmm;
extension templates::auxiliares;
extension templates::cpptypes;

extension templates::Expression;
extension templates::StructDef;

/*** Common generated code ***/

/* TypeCode declaration: general */
getCode_TypeCodeDeclaration(Boolean definedInInterface, String identifier) :
    (definedInInterface == true ? "static" : "extern") + " CORBA::TypeCode_ptr const _tc_"+identifier+";";
/* TypeCode declaration: subclasses */
getCode_TypeCodeDeclaration(StructDef this) :
    getCode_TypeCodeDeclaration(isNestedStruct() || InterfaceDef.isInstance(definedIn), identifier); // definedIn == null -> StructDef definida en un Field de una estructura

getCode_TypeCodeDeclaration(AliasDef this) : getCode_TypeCodeDeclaration(InterfaceDef.isInstance(definedIn), identifier);
getCode_TypeCodeDeclaration(EnumDef this) : getCode_TypeCodeDeclaration(InterfaceDef.isInstance(definedIn), identifier);
getCode_TypeCodeDeclaration(InterfaceDef this) : getCode_TypeCodeDeclaration(InterfaceDef.isInstance(definedIn), identifier);
getCode_TypeCodeDeclaration(ExceptionDef this) : getCode_TypeCodeDeclaration(InterfaceDef.isInstance(definedIn), identifier);

_getCode_ConstCommonDeclDef(ConstantDef this, Boolean useFQN) :
    "const "+getType().get_CPPType()+" "+(useFQN? getFQN() : identifier);

getCode_ConstDeclaration(ConstantDef this) :
    _getCode_ConstCommonDeclDef(false)+ " = " + constValue.exp2str(true) + ";"
;

getCode_ConstDefinition(ConstantDef this, Boolean useFQN) :
    _getCode_ConstCommonDeclDef(useFQN)+ " = " + constValue.exp2str(useFQN) + ";"
;

/* Sequence declarations: common code for Sequences and Anonymous Sequences */
getCode_SequenceDeclaration(SequenceDef this, String identifier, String typecode) :
    (bound == null? "typedef csu::mycorba::unbounded_sequence_t< "+getType().getFQN_Type()+", "+typecode+" > "+identifier+";" :
    "typedef csu::mycorba::bounded_sequence_t< "+getType().getFQN_Type()+", "+ bound.exp2str(true) +", "+typecode+" > "+identifier+";") + "\n"+
    "typedef csu::mycorba::_sequence_var_t< "+identifier+" > "+identifier+"_var;\n"+
    "typedef csu::mycorba::_sequence_out_t< "+identifier+" > "+identifier+"_out;";

/** Any operators **/
/* Any operators declaration: Base for each type (structures, sequences, anonymous sequences, interfaces and enumerates) */
getCode_AnyOperatorsDeclaration(String type_copy, String type_noncopy, String type_extract) :
    "void operator<<=(CORBA::Any & a, "+type_copy+" s); // copying version\n"+
    "void operator<<=(CORBA::Any & a, "+type_noncopy+" s); // noncopying version\n"+
    "CORBA::Boolean operator>>=(const CORBA::Any & a, "+type_extract+" s);\n";

/* Any operators declaration: Structures and Anonymous sequences) */
getCode_AnyOperatorsDeclaration(StructDef this, String type) :
    getCode_AnyOperatorsDeclaration("const "+type+"&", type+"*", "const "+type+"*&");

/* Any operators declaration: Sequences */
getCode_AnyOperatorsDeclaration(AliasDef this, String type) :
    getCode_AnyOperatorsDeclaration("const "+type+"&", type+"*", "const "+type+"*&");

getCode_AnyOperatorsDeclaration(InterfaceDef this) :
    let type = get_CPPType() :
    getCode_AnyOperatorsDeclaration(type, type+"*", type+"&");

getCode_AnyOperatorsDeclaration(EnumDef this) :
    let type = get_CPPType() :
    "void operator<<=( CORBA::Any & a, "+type+" s);\n"+
    "CORBA::Boolean operator>>=(const CORBA::Any & a, "+type+" & s);\n";

getCode_AnyOperatorsDeclaration(ArrayDef this, String forany_type) :
    "void operator<<=( CORBA::Any & a, const "+forany_type+" & s);\n"+
    "CORBA::Boolean operator>>=(const CORBA::Any & a, "+forany_type+" & s);\n";

/* Any operators definition: Base for each type (structures, sequences, anonymous sequences, interfaces and enumerates) */
getCode_AnyOperatorsDefinition(String type_copy, String type_noncopy, String type_extract,
                            String fqn, String typecode, String func_prefix) :
    "void CORBA::operator<<=( CORBA::Any & a, "+type_copy+" s)\n"+
    "{\n"+
    "    csu::mycorba::mapping::"+func_prefix+"_to_any_copy< "+fqn+" > (a, s, "+typecode+");\n"+
    "}\n\n"+
    "void CORBA::operator<<=( CORBA::Any & a, "+type_noncopy+" s)\n"+
    "{\n"+
    "    csu::mycorba::mapping::"+func_prefix+"_to_any_noncopy< "+fqn+" > (a, s, "+typecode+");\n"+
    "}\n\n"+
    "CORBA::Boolean CORBA::operator>>=(const CORBA::Any & a, "+type_extract+" s)\n"+
    "{\n"+
    "    return csu::mycorba::mapping::"+func_prefix+"_from_any< "+fqn+" > (a, s, "+typecode+");\n"+
    "}";

// Structures and anonymous sequences
getCode_AnyOperatorsDefinition(StructDef this, String fqn, String typecode) :
    getCode_AnyOperatorsDefinition("const "+fqn+" &", fqn+"*", "const "+fqn+"*&",
                                    fqn, typecode, "struct");

// Sequences
getCode_AnyOperatorsDefinition(AliasDef this, String fqn, String typecode) :
    getCode_AnyOperatorsDefinition("const "+fqn+" &", fqn+"*", "const "+fqn+"*&",
                                    fqn, typecode, "struct");

getCode_AnyOperatorsDefinition(InterfaceDef this) :
    let type = get_CPPType() :
    let typecode = getTypeCode() :
    let fqn = getFQN()  :
    getCode_AnyOperatorsDefinition(type, type+"*", type+"&",
                                    fqn, typecode, "objref" );

getCode_AnyOperatorsDefinition(EnumDef this) :
    let type = get_CPPType() :
    let typecode = getTypeCode() :
    let fqn = getFQN()  :
    "void CORBA::operator<<=( CORBA::Any & a, "+type+" s)\n"+
    "{\n"+
    "    csu::mycorba::mapping::enum_to_any< "+fqn+" > (a, s, "+typecode+");\n"+
    "}\n\n"+
    "CORBA::Boolean CORBA::operator>>=(const CORBA::Any & a, "+type+" & s)\n"+
    "{\n"+
    "    return csu::mycorba::mapping::enum_from_any< "+fqn+" > (a, s, "+typecode+");\n"+
    "}";

getCode_AnyOperatorsDefinition(ArrayDef this, String fqn, String typecode) :
    "void CORBA::operator<<=( CORBA::Any & a, const "+fqn+"_forany & s)\n"+
    "{\n"+
    "    csu::mycorba::mapping::array_to_any< "+fqn+"_forany > (a, s, "+typecode+");\n"+
    "}\n\n"+
    "CORBA::Boolean CORBA::operator>>=(const CORBA::Any & a, "+fqn+"_forany & s)\n"+
    "{\n"+
    "    return csu::mycorba::mapping::array_from_any< "+fqn+"_forany > (a, s, "+typecode+");\n"+
    "}\n";

/* templates used by parameters, in Stub */
getCode_StubArg(ParameterDef this) :
    getCode_StubArgTemplate() + " _" + identifier +" (__req, \"" + identifier + "\", " + identifier + ");"
;

getCode_StubArg(AttributeDef this) :
    getType().getCode_StubArgIN() + " _" + identifier +" (__req, \"" + identifier + "\", " + identifier + ");"
;

getCode_StubArgTemplate(ParameterDef this) :
    switch (direction) {
        case ParameterMode::PARAM_IN : getType().getCode_StubArgIN()
        case ParameterMode::PARAM_OUT : getType().getCode_StubArgOUT()
        case ParameterMode::PARAM_INOUT : getType().getCode_StubArgINOUT()
        default : "/*UNKNOWN Parameter direction: "+direction+"*/"
    }
    ;

getCode_StubArgIN(IDLType this) :
    if getOriginalType().isObjectRef() then
        "stub::Arg_IN_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Arg_IN_array_variable< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Arg_IN_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Arg_IN_array_fixed< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Arg_IN_fixed< "+getFQN_Type()+" >"
    )
    else
        "stub::Arg_IN< "+getFQN_Type()+" >"
    ;

getCode_StubArgINOUT(IDLType this) :
    if getOriginalType().isObjectRef() then
        "stub::Arg_INOUT_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Arg_INOUT_array_variable< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
        "stub::Arg_INOUT_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Arg_INOUT_array_fixed< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Arg_INOUT_fixed< "+getFQN_Type()+" >"
    )
    else
        "stub::Arg_INOUT< "+getFQN_Type()+" >"
    ;

getCode_StubArgOUT(IDLType this) :
    if getOriginalType().isObjectRef() then
        "stub::Arg_OUT_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Arg_OUT_array_variable< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Arg_OUT_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Arg_OUT_array_fixed< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Arg_OUT_fixed< "+getFQN_Type()+" >"
    )
    else
        "stub::Arg_OUT< "+getFQN_Type()+" >"
    ;

/* templates used by parameters, in Skel */
getCode_SkelArg(ParameterDef this) :
    switch (direction) {
        case ParameterMode::PARAM_IN : getType().getCode_SkelArgIN()
        case ParameterMode::PARAM_OUT : getType().getCode_SkelArgOUT()
        case ParameterMode::PARAM_INOUT : getType().getCode_SkelArgINOUT()
        default : "/*UNKNOWN Parameter direction: "+direction+"*/"
    }
    ;

getCode_SkelArgIN(IDLType this) :
    if getOriginalType().isObjectRef() then
        "::csu::mycorba::mapping::skel::Arg_IN_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "::csu::mycorba::mapping::skel::Arg_IN_array_variable< "+getFQN_Type()+"_forany >"
        else
            "::csu::mycorba::mapping::skel::Arg_IN_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "::csu::mycorba::mapping::skel::Arg_IN_array_fixed< "+getFQN_Type()+"_forany >"
        else
            "::csu::mycorba::mapping::skel::Arg_IN_fixed< "+getFQN_Type()+" >"
    )
    else
        "::csu::mycorba::mapping::skel::Arg_IN< "+getFQN_Type()+" >"
    ;

getCode_SkelArgINOUT(IDLType this) :
    if getOriginalType().isObjectRef() then
        "::csu::mycorba::mapping::skel::Arg_INOUT_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "::csu::mycorba::mapping::skel::Arg_INOUT_array_variable< "+getFQN_Type()+"_forany >"
        else
            "::csu::mycorba::mapping::skel::Arg_INOUT_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "::csu::mycorba::mapping::skel::Arg_INOUT_array_fixed< "+getFQN_Type()+"_forany >"
        else
            "::csu::mycorba::mapping::skel::Arg_INOUT_fixed< "+getFQN_Type()+" >"
    )
    else
        "::csu::mycorba::mapping::skel::Arg_INOUT< "+getFQN_Type()+" >"
    ;

getCode_SkelArgOUT(IDLType this) :
    if getOriginalType().isObjectRef() then
        "::csu::mycorba::mapping::skel::Arg_OUT_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "::csu::mycorba::mapping::skel::Arg_OUT_array_variable< "+getFQN_Type()+"_forany >"
        else
            "::csu::mycorba::mapping::skel::Arg_OUT_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "::csu::mycorba::mapping::skel::Arg_OUT_array_fixed< "+getFQN_Type()+"_forany >"
        else
            "::csu::mycorba::mapping::skel::Arg_OUT_fixed< "+getFQN_Type()+" >"
    )
    else
        "::csu::mycorba::mapping::skel::Arg_OUT< "+getFQN_Type()+" >"
    ;

// Require this != void (use returnVoid())
getCode_StubReturn(IDLType this) :
    getCode_StubReturnTemplate() +  "_result(__req);"
;

private getCode_StubReturnTemplate(IDLType this) :
    if getOriginalType().isObjectRef() then
        "stub::Return_objref< "+getFQN_Type()+" >"
    else if (getArgType() == "Variable") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Return_array_variable< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Return_variable< "+getFQN_Type()+" >"
    )
    else if (getArgType() == "Fixed") then
    (
        if ArrayDef.isInstance(getOriginalType()) then
            "stub::Return_array_fixed< "+getFQN_Type()+", "+getFQN_Type()+"_forany >"
        else
            "stub::Return_fixed< "+getFQN_Type()+" >"
    )
    else
        "stub::Return< "+getFQN_Type()+" >"
    ;

