«IMPORT org::csu::idl::idlmm»
«EXTENSION templates::auxiliares»
«EXTENSION templates::cpptypes»
«EXTENSION templates::cppcode»
«EXTENSION templates::FileName»
«EXTENSION templates::Properties»
«EXTENSION templates::Operations»

«EXTENSION templates::StructDef»
«EXTENSION templates::SequenceDef»
«EXTENSION templates::Expression»

«DEFINE main FOR TranslationUnit-»
«FILE getFileNameStubCpp()-»
«EXPAND templates::Header::header(getFileNameStubCpp()) FOR this-»

#include "«getFileNameStubHpp()»"

«EXPAND body FOREACH this.contains-»

«ENDFILE-»
«ENDDEFINE»

«REM»Caso base«ENDREM»
«DEFINE body FOR Contained-»«ENDDEFINE»


«DEFINE body FOR ModuleDef-»
    «EXPAND body FOREACH this.contains-»
«ENDDEFINE»

«REM»
«DEFINE body FOR ConstantDef-»
    «IF InterfaceDef.isInstance(definedIn)-»
«getCode_ConstDefinition(true)»
    «ENDIF-»
«ENDDEFINE»
«ENDREM»

«DEFINE body FOR AliasDef-»
// BEGIN ALIAS ENUM «getFQN()»
«IF SequenceDef.isInstance(getType())-»
    «EXPAND seq FOR this»
«ELSEIF ArrayDef.isInstance(getType())-»
    «EXPAND array FOR this-»
«ELSE-»
static ::csu::mycorba::AliasTypeCodeImpl< «getFQN()» > __tc_«getFQN("_")»(
                                                           "IDL:«getFQN("/")»:1.0",
                                                           "«identifier»",
                                                           «getType().getTypeCode()»);

CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;
«ENDIF»
// END ALIAS ENUM «getFQN()»
«ENDDEFINE»



«DEFINE seq FOR AliasDef-»
«LET (SequenceDef)this.containedType AS seq-»
// SEQUENCE: «identifier»
static ::csu::mycorba::SequenceTypeCodeImpl< «getFQN()»«IF seq.bound != null-», false, «seq.bound.exp2str(true)»«ENDIF-» > __tc_«getFQN("_")»(«seq.getType().getTypeCode()»);
CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;

// Any operators
«getCode_AnyOperatorsDefinition(getFQN(),getTypeCode())»

«ENDLET-»
«ENDDEFINE»


«DEFINE array FOR AliasDef-»
// ARRAY: «identifier»
«LET ((ArrayDef) getType()) AS array-»
static ::csu::mycorba::ArrayTypeCodeImpl< false, «array.getArrayType().get_CPPType()», «array.getArrayType().getTypeCode()», «array.getArrayDimensionsComma()» > __tc_«getFQN("_")»;

CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;

    «EXPAND templates::ArrayDef::stubC(identifier, getFQN()) FOR array-»

// Any operators
«REM»
«((ArrayDef) getType()).getCode_AnyOperatorsDefinition(getFQN(), getTypeCode())»
«ENDREM»

«ENDLET-»
«ENDDEFINE»



«DEFINE body FOR EnumDef»
// BEGIN BODY ENUM «getFQN()»
static ::csu::mycorba::_nv_field
__fields_«getFQN("_")»[] = {
    «FOREACH members AS member-»
    {"«member.identifier»", NULL},
«ENDFOREACH-»
    { "", NULL}
};

static ::csu::mycorba::EnumTypeCodeImpl< «getFQN()» > __tc_«getFQN("_")»("IDL:«getFQN("/")»:1.0",
                                                                       "«identifier»",
                                                                       __fields_«getFQN("_")»);

CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;

// Any operators
«getCode_AnyOperatorsDefinition()»
// END BODY ENUM «getFQN()»

«ENDDEFINE»




«DEFINE body FOR InterfaceDef-»
// BEGIN BODY INTERFACE «getFQN()»

static ::csu::mycorba::ObjrefTypeCodeImpl< «getFQN()» > __tc_«getFQN("_")»(
                                                           "IDL:«getFQN("/")»:1.0",
                                                           "«identifier»");

CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;

«getFQN()»::«identifier»()
{
}

«getFQN()»::~«identifier»()
{
}

«getFQN()»::«identifier»(const CORBA::Object& obj) : Object(obj)
{
}

«getFQN()»_ptr «getFQN()»::_duplicate(«identifier»_ptr obj)
{
    if (obj) obj->_add_ref();
        return obj;
}

«getFQN()»_ptr «getFQN()»::_narrow(CORBA::Object_ptr obj)
{
    return new «identifier»(*obj);
}

// Any operators
«getCode_AnyOperatorsDefinition()»

    «EXPAND body FOREACH this.contains-»

// END BODY INTERFACE «getFQN()»
«ENDDEFINE»




«DEFINE body FOR ExceptionDef-»
// BEGIN BODY EXCEPTION «getFQN()»
«IF !members.isEmpty-»
static ::csu::mycorba::_nv_field
__fields_«getFQN("_")»[] = {
    «FOREACH members AS mmb-»
    {"«mmb.identifier»", «mmb.getType().getTypeCode()»},
    «ENDFOREACH-»
    { "", NULL}
};

«ENDIF-»
csu::mycorba::ExceptionTypeCodeImpl< «getFQN()», CORBA::UserException > __tc_«getFQN("_")»("IDL:«getFQN("/")»:1.0", "«identifier»", «IF !members.isEmpty»__fields_«getFQN("_")»«ELSE»NULL«ENDIF»);
CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;
// END BODY EXCEPTION «getFQN()»
«ENDDEFINE»





«DEFINE body FOR OperationDef»
// BEGIN BODY OPERATION «getFQN()»
    «IF !contexts.isEmpty-»
// ERROR: CONTEXT IN OPERATIONDEF NOT SUPPORTED (YET)
    «ENDIF-»
«getSignature(getFQN())»
{
    using namespace csu::mycorba::mapping;

    CORBA::Request_var __req = _request("«identifier»");

    // Setting up parameters
        «FOREACH parameters AS param-»
    «param.getCode_StubArg()»
        «ENDFOREACH-»

        «IF !isOneway-»
            «IF !returnVoid()-»
    «getType().getCode_StubReturn()»

            «ENDIF-»
    __req->invoke();

    const CORBA::Exception * __exception = __req->env()->exception();
    if (__exception)
    {
        __exception->_raise();
    }
        «   IF !returnVoid()»
    return _result.val();
            «ENDIF-»
        «ELSE-»
    __req->send_oneway();
    «ENDIF-»
}
// END BODY OPERATION «getFQN()»

«ENDDEFINE»



«DEFINE body FOR AttributeDef»
// BEGIN BODY ATTRIBUTE «getFQN()»
«getGetSignature(getFQN())»«REM»GET function«ENDREM»
{
    using namespace csu::mycorba::mapping;

    CORBA::Request_var __req = _request("«identifier»:get");

    «getType().getCode_StubReturn()»

    __req->invoke();

    return _result.val();
}
«IF !isReadonly-»

«getSetSignature(getFQN())»«REM»SET function«ENDREM»
{
    using namespace csu::mycorba::mapping;

    CORBA::Request_var __req = _request("«identifier»:set");

    «getCode_StubArg()»

    __req->invoke();
}
«ENDIF-»
// END BODY ATTRIBUTE «getFQN()»

«ENDDEFINE»




«DEFINE body FOR StructDef-»
// BEGIN BODY STRUCT «identifier»
    «FOREACH getAnonymousFields() AS field-»
        «EXPAND anonymous(this, field) FOR field.getType()-»
    «ENDFOREACH-»

    «EXPAND body FOREACH getNestedStructs()-»

static ::csu::mycorba::_nv_field
__fields_«getFQN("_")»[] = {
    «FOREACH members AS member-»
    {"«member.identifier»", «member.getMemberTypeCode(this)»},
    «ENDFOREACH-»
    { "", NULL}
};

static ::csu::mycorba::StructTypeCodeImpl< «getFQN()» > __tc_«getFQN("_")»(
                                                           "IDL:«getFQN("/")»:1.0",
                                                           "«identifier»",
                                                           __fields_«getFQN("_")»);

CORBA::TypeCode_ptr const «getTypeCode()» = &__tc_«getFQN("_")»;

// Any operators

«getCode_AnyOperatorsDefinition(getFQN(),getTypeCode())»
// END BODY STRUCT «identifier»
«ENDDEFINE»

«REM»Anonymous types used inside the Structure«ENDREM»
«DEFINE anonymous(StructDef struct, Field field) FOR IDLType-»«ENDDEFINE»



«DEFINE anonymous(StructDef struct, Field field) FOR SequenceDef»
// BEGIN ANONYMOUS SEQUENCE «field.identifier»
static ::csu::mycorba::SequenceTypeCodeImpl< «struct.getFQN(field)»«getTypeCodeImplParameters()» > «field.getMemberTypeCodeImpl(struct)»(«getType().getTypeCode()»);
CORBA::TypeCode_ptr const «field.getMemberTypeCode(struct)» = &«field.getMemberTypeCodeImpl(struct)»;

// Any operators
«struct.getCode_AnyOperatorsDefinition(struct.getFQN(field), struct.getTypeCode(field))»
// END ANONYMOUS SEQUENCE «field.identifier»
«ENDDEFINE»



«DEFINE anonymous(StructDef struct, Field field) FOR ArrayDef»
// BEGIN ANONYMOUS ARRAY «field.identifier»
static ::csu::mycorba::ArrayTypeCodeImpl< false, «getArrayType().get_CPPType()», «getArrayType().getTypeCode()», «getArrayDimensionsComma()» > «field.getMemberTypeCodeImpl(struct)»;
CORBA::TypeCode_ptr const «field.getMemberTypeCode(struct)» = &«field.getMemberTypeCodeImpl(struct)»;

    «EXPAND templates::ArrayDef::stubC(field.getMemberTypeId(), struct.getFQN(field)) FOR this-»
«REM»
// Any operators
«getCode_AnyOperatorsDefinition(struct.getFQN(field), struct.getTypeCode(field))»
«ENDREM»
// END ANONYMOUS ARRAY «field.identifier»
«ENDDEFINE»
