import org::csu::idl::idlmm;

extension templates::cpptypes reexport;

String getCallType(ParameterDef this) : switch(direction)
{
    case ParameterMode::PARAM_IN: getType().getMemberTypeIdNoAnonymous()
    case ParameterMode::PARAM_OUT: getType().getCallTypeOut()
    case ParameterMode::PARAM_INOUT: getType().getMemberTypeIdNoAnonymous()
    default: ""
};

String getCallTypeOut(IDLType this): getMemberTypeIdNoAnonymous();

String getCallTypeOut(StructDef this) : isVariableLen()? getFQN()+"_var" : getMemberTypeIdNoAnonymous();

String getCallTypeOut(AliasDef this) :
    if SequenceDef.isInstance(getOriginalType()) then
        getFQN()+"_var"
    else
        getMemberTypeIdNoAnonymous()
;

Boolean returnString(OperationDef this) :
    let t = getOriginalType():
    ((PrimitiveDef.isInstance(t) && ((PrimitiveDef)t).kind == PrimitiveKind::PK_STRING)) ||
    StringDef.isInstance(t)
;

Boolean returnWString(OperationDef this) :
    let t = getOriginalType():
    ((PrimitiveDef.isInstance(t) && ((PrimitiveDef)t).kind == PrimitiveKind::PK_WSTRING)) ||
    WstringDef.isInstance(t)
;

Boolean isString(IDLType this) :
    let t = getOriginalType():
    ((PrimitiveDef.isInstance(t) && ((PrimitiveDef)t).kind == PrimitiveKind::PK_STRING)) ||
    StringDef.isInstance(t)
;

// Chapuza
Boolean returnPointer(OperationDef this) :
    let t = getType():
    let r = t.getReturn_CPPType():
    r.endsWith("*") || r.endsWith("_ptr")
;
