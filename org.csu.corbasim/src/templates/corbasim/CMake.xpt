«IMPORT org::csu::idl::idlmm»

«EXTENSION templates::corbasim::corbasim»

«DEFINE main FOR TranslationUnit-»
«LET getFileName() AS filename»
«FILE filename+".cmake"»

    «IF generateClient() || generateServerUI()-»
find_package(Qt4 REQUIRED)
include(${QT_USE_FILE})
    «ENDIF-»

set(«filename»_GENERATED
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFileNameStubHpp()»
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFileNameStubCpp()»
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFileNameSkelHpp()»
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFileNameSkelCpp()»)

add_custom_command(
    OUTPUT ${«filename»_GENERATED}
    DEPENDS «filename».idl
    COMMAND ${CORBASIM_ORB_IDL_COMPILER} ${CORBASIM_ORB_IDL_COMPILER_OPTIONS} «filename».idl
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_library(${CORBASIM_PREFIX}«filename»_idl SHARED ${«filename»_GENERATED} «getAdaptedFileCPP()»)
target_link_libraries(${CORBASIM_PREFIX}«filename»_idl
    ${CORBASIM_ORB_LIBS}
    «FOREACH includes AS e-»
    ${CORBASIM_PREFIX}«e.getFileName()»_idl
    «ENDFOREACH-»)
install(TARGETS ${CORBASIM_PREFIX}«filename»_idl DESTINATION lib)

add_library(${CORBASIM_PREFIX}«filename»_idl_s STATIC ${«filename»_GENERATED} «getAdaptedFileCPP()»)
install(TARGETS ${CORBASIM_PREFIX}«filename»_idl_s DESTINATION lib)

    «EXPAND cmake FOREACH contains-»

«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE cmake FOR Contained-»«ENDDEFINE»
«DEFINE cmake FOR ModuleDef-»
    «EXPAND cmake FOREACH contains-»
«ENDDEFINE»

«DEFINE cmake FOR InterfaceDef»
«LET getFQN("_") AS fqn»
    «IF generateReflectiveLibrary()-»
# Corbasim reflective library
add_library(corbasim_reflective_«fqn» SHARED «fqn»_reflective.cpp)
target_link_libraries(corbasim_reflective_«fqn»
    ${CORBASIM_PREFIX}«getTranslationUnit().getFileName()»_idl
    ${CORBASIM_ORB_LIBS}
    # CORBASIM Library
    corbasim)
install(TARGETS corbasim_reflective_«fqn» DESTINATION lib)

add_library(corbasim_static_reflective_«fqn» STATIC «fqn»_reflective.cpp)
install(TARGETS corbasim_static_reflective_«fqn» DESTINATION lib)

    «ENDIF-»
    «IF generateClient()-»
# Client
add_executable(${CORBASIM_PREFIX}«fqn»_client «fqn»_client.cpp)
if(${CORBASIM_STATIC_LINK})
    target_link_libraries(${CORBASIM_PREFIX}«fqn»_client
        corbasim_static_reflective_«fqn»
        ${CORBASIM_PREFIX}«getTranslationUnit().getFileName()»_idl_s
    «FOREACH getTranslationUnit().includes AS e-»
        ${CORBASIM_PREFIX}«e.getFileName()»_idl_s
    «ENDFOREACH-»
        ${CORBASIM_CLIENT_STATIC_LIBS}
        ${CORBASIM_ORB_LIBS}
        ${QT_LIBRARIES})
else()
    target_link_libraries(${CORBASIM_PREFIX}«fqn»_client
        ${CORBASIM_PREFIX}«getTranslationUnit().getFileName()»_idl
        corbasim_reflective_«fqn»
        ${CORBASIM_ORB_LIBS}
        ${QT_LIBRARIES}
        ${CORBASIM_CLIENT_LIBS})
endif()
install(TARGETS ${CORBASIM_PREFIX}«fqn»_client DESTINATION bin)

    «ENDIF-»
    «IF generateServerUI()-»
# Client
add_executable(${CORBASIM_PREFIX}«fqn»_server_ui «fqn»_server_ui.cpp)
if(${CORBASIM_STATIC_LINK})
    target_link_libraries(${CORBASIM_PREFIX}«fqn»_server_ui
        corbasim_static_reflective_«fqn»
        ${CORBASIM_PREFIX}«getTranslationUnit().getFileName()»_idl_s
    «FOREACH getTranslationUnit().includes AS e-»
        ${CORBASIM_PREFIX}«e.getFileName()»_idl_s
    «ENDFOREACH-»
        ${CORBASIM_CLIENT_STATIC_LIBS}
        ${CORBASIM_ORB_LIBS}
        ${QT_LIBRARIES})
else()
    target_link_libraries(${CORBASIM_PREFIX}«fqn»_server_ui
        ${CORBASIM_PREFIX}«getTranslationUnit().getFileName()»_idl
        corbasim_reflective_«fqn»
        ${CORBASIM_ORB_LIBS}
        ${QT_LIBRARIES}
        ${CORBASIM_CLIENT_LIBS})
endif()
install(TARGETS ${CORBASIM_PREFIX}«fqn»_server_ui DESTINATION bin)

    «ENDIF-»
    «IF generateServer()-»
# Server
add_executable(${CORBASIM_PREFIX}«fqn»_server «fqn»_server.cpp)
target_link_libraries(${CORBASIM_PREFIX}«fqn»_server
    ${CORBASIM_PREFIX}«getTranslationUnit().getFileName()»_idl
    ${CORBASIM_ORB_LIBS}
    ${CORBASIM_SERVER_LIBS})
install(TARGETS ${CORBASIM_PREFIX}«fqn»_server DESTINATION bin)

    «ENDIF-»
«ENDLET»
«ENDDEFINE»
