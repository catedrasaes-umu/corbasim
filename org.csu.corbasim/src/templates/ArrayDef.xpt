«IMPORT org::csu::idl::idlmm»

«EXTENSION templates::auxiliares»
«EXTENSION templates::cpptypes»

«DEFINE stubH(String identifier) FOR ArrayDef-»
    «EXPAND stubH(identifier,false) FOR this-»
«ENDDEFINE»



«DEFINE stubH(String identifier, Boolean static) FOR ArrayDef»
// BEGIN ARRAY STUBH «identifier»
«LET (static)? "static" : "" AS st»
typedef «getArrayType().get_CPPType()» «identifier»«getArrayDimensionsDecl()»;
typedef «getArrayType().get_CPPType()» «identifier»_slice«getArraySliceDimensions()»;

«IF this.getArgType() == "Variable"-»
typedef csu::mycorba::_array_variable_var_t<«identifier», «identifier»_slice> «identifier»_var;
typedef csu::mycorba::_array_variable_forany_t<«identifier», «identifier»_slice> «identifier»_forany;
«ELSE-»
typedef csu::mycorba::_array_fixed_var_t<«identifier», «identifier»_slice> «identifier»_var;
typedef csu::mycorba::_array_fixed_forany_t<«identifier», «identifier»_slice> «identifier»_forany;
«ENDIF-»

// Dynamic allocation methods
«st» «identifier»_slice *«identifier»_alloc();
«st» «identifier»_slice *«identifier»_dup(const «identifier»_slice*);
«st» void «identifier»_copy(«identifier»_slice* to, const «identifier»_slice* from);
«st» void «identifier»_free(«identifier»_slice *);
«ENDLET-»
// END ARRAY STUBH «identifier»
«ENDDEFINE»



«DEFINE stubC(String identifier, String fqn) FOR ArrayDef»
// BEGIN ARRAY STUBC «identifier»
// Dynamic allocation methods
«fqn»_slice *«fqn»_alloc()
{
    «fqn»_slice *retval = 0;
    retval = new «identifier»;
    return retval;
};

«fqn»_slice *«fqn»_dup(const «fqn»_slice* _src_array)
{
    «fqn»_slice *_dup_array = «fqn»_alloc();

    if (!_dup_array)
    {
        return static_cast <«fqn»_slice *> (0);
    }

    «fqn»_copy (_dup_array, _src_array);
    return _dup_array;
}

void «fqn»_copy(«fqn»_slice* to, const «fqn»_slice* from)
{
    // Copy each individual element.
    for (CORBA::ULong i = 0; i < «getArrayDimensionsMult()»; ++i)
            («FOREACH bounds.withoutLast() AS dim»*«ENDFOREACH»to)[i] = («FOREACH bounds.withoutLast() AS dim»*«ENDFOREACH»from)[i];
}

void «fqn»_free(«fqn»_slice * _slice)
{
    delete [] _slice;
}
// END ARRAY STUBC «identifier»
«ENDDEFINE»


